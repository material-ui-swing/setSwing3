/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    flatDir {
        dirs '../set_swing/libs/'
    }

}

dependencies {

    //implementation 'com.github.vincenzopalazzo:material-ui-swing:V9.9'

    compile(name: 'iconloader', ext: 'jar')
    compile(name: 'material-ui-swing-0.9.9', ext: 'jar')
    compile(name: 'darcula', ext: 'jar')
    compile(name: 'AnimatedTransitions', ext: 'jar')
    compile(name: 'AppFramework', ext: 'jar')
    compile(name: 'filters-2.0.235', ext: 'jar')
    compile(name: 'swing-worker-1.1', ext: 'jar')
    compile(name: 'swingx-1.6.1', ext: 'jar')

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}


jar {
    manifest {
        attributes("Class-Path": configurations.compile.collect { it.getName() }.join(','))

        attributes 'Main-Class': 'SwingSet2'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

sourceSets {
    integTest {
        compileClasspath += files('src/main/java/')
        runtimeClasspath += output + compileClasspath + files('src/main/resources/')
    }
}

task copyFileSource {
    doLast{
        copy {
            println 'init task copy source file'
            from 'src/main/java'
            into 'build/libs/sources'
        }
    }
}

task tarz(type: Tar) {
    archiveName = 'Demo-Swing-set3.tar'
    into ('/'){
        from 'build/libs'
    }

    destinationDir  file('build/libs')
    extension 'tar'
    compression = Compression.GZIP
}

build.dependsOn copyFileSource
build.dependsOn tarz
// Define the main class for the application
mainClassName = 'SwingSet2'

